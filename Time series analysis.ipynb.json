{
 "metadata": {
  "name": "",
  "signature": "sha256:ec46c49f2e9548100db913e6e30d19d7f37f49326dc1b19850cdb14bfd7c2c5e"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Time Series Analysis using Pandas "
     ]
    },
    {
     "cell_type": "heading",
     "level": 2,
     "metadata": {},
     "source": [
      "Kaggle Case Study : Bike Sharing Demand "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import pandas as pd\n",
      "import numpy as np\n",
      "from pandas import Series,DataFrame\n",
      "import matplotlib.pyplot as plt\n",
      "import math\n",
      "import os"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 198
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Os module is used for directory operations "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "os.getcwd()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 199,
       "text": [
        "'/Users/soumiljain/Desktop/bike/Archive/data'"
       ]
      }
     ],
     "prompt_number": 199
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "!ls"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "data_panel    foo.pkl       spx_px        test1.csv\r\n",
        "fec.pickle    fred_fx.csv   stk_prices    test2.csv\r\n",
        "foo.csv       macrodata.csv stock_prices\r\n"
       ]
      }
     ],
     "prompt_number": 201
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "pd.__version__"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 203,
       "text": [
        "'0.14.1'"
       ]
      }
     ],
     "prompt_number": 203
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We are using pandas version 0.14.1"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "os.chdir('archive')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "OSError",
       "evalue": "[Errno 2] No such file or directory: 'archive'",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)",
        "\u001b[0;32m<ipython-input-204-c7c698b7a75c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'archive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
        "\u001b[0;31mOSError\u001b[0m: [Errno 2] No such file or directory: 'archive'"
       ]
      }
     ],
     "prompt_number": 204
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "!ls"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "data_panel    foo.pkl       spx_px        test1.csv\r\n",
        "fec.pickle    fred_fx.csv   stk_prices    test2.csv\r\n",
        "foo.csv       macrodata.csv stock_prices\r\n"
       ]
      }
     ],
     "prompt_number": 205
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "The following statement is used so that all the graphs and plots are displayed within the notebook"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "%pylab inline"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Populating the interactive namespace from numpy and matplotlib\n"
       ]
      },
      {
       "output_type": "stream",
       "stream": "stderr",
       "text": [
        "WARNING: pylab import has clobbered these variables: ['datetime']\n",
        "`%matplotlib` prevents importing * from pylab and numpy\n"
       ]
      }
     ],
     "prompt_number": 206
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "For example: "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(np.arange(100))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 207,
       "text": [
        "[<matplotlib.lines.Line2D at 0x10afb9390>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10aec2350>"
       ]
      }
     ],
     "prompt_number": 207
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Thus the plot is displayed within the notebook "
     ]
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "New datatype in pandas for datetime .Its very efficient and fast . Really good for millions of observations data (very large scale time series processing )"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "plt.plot(np.random.randn(1000).cumsum())"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 208,
       "text": [
        "[<matplotlib.lines.Line2D at 0x10b3234d0>]"
       ]
      },
      {
       "metadata": {},
       "output_type": "display_data",
       "png": "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\n",
       "text": [
        "<matplotlib.figure.Figure at 0x10b1103d0>"
       ]
      }
     ],
     "prompt_number": 208
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "This code generates a series of 1000 random numbers and calculate its cumulative sum column , so we get this decreasing graph "
     ]
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Some REVISION"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "np.arange(5)[2:]#slicing"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 209,
       "text": [
        "array([2, 3, 4])"
       ]
      }
     ],
     "prompt_number": 209
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "index=['a','b','c','d','e']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 210
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s=Series(np.arange(5),index=index)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 211
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 212,
       "text": [
        "a    0\n",
        "b    1\n",
        "c    2\n",
        "d    3\n",
        "e    4\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 212
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So this is a vertical 1 dimentional series with labels/Index"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Series contains labels that identify the data"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Series object behaves much like a numpy array "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s*2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 213,
       "text": [
        "a    0\n",
        "b    2\n",
        "c    4\n",
        "d    6\n",
        "e    8\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 213
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s+s"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 214,
       "text": [
        "a    0\n",
        "b    2\n",
        "c    4\n",
        "d    6\n",
        "e    8\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 214
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s/s"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 215,
       "text": [
        "a         inf\n",
        "b    1.000000\n",
        "c    1.000000\n",
        "d    1.000000\n",
        "e    1.000000\n",
        "dtype: float64"
       ]
      }
     ],
     "prompt_number": 215
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "slicing :"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s[2:3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 216,
       "text": [
        "c    2\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 216
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s['b']#value from labels"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 217,
       "text": [
        "1"
       ]
      }
     ],
     "prompt_number": 217
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s['b':]#slicing with labels"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 218,
       "text": [
        "b    1\n",
        "c    2\n",
        "d    3\n",
        "e    4\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 218
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s[[2,4]]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 219,
       "text": [
        "c    2\n",
        "e    4\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 219
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s[['c','e']]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 220,
       "text": [
        "c    2\n",
        "e    4\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 220
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "These were the ways of slicing we could do "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "dates=pd.date_range('2012-07-16','2012-07-21')\n",
      "dates"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 221,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2012-07-16, ..., 2012-07-21]\n",
        "Length: 6, Freq: D, Timezone: None"
       ]
      }
     ],
     "prompt_number": 221
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is a DateTimeIndex variable array created "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "atemps=Series([101.5,98,95,99,100,92],index=dates)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 222
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "atemps"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 223,
       "text": [
        "2012-07-16    101.5\n",
        "2012-07-17     98.0\n",
        "2012-07-18     95.0\n",
        "2012-07-19     99.0\n",
        "2012-07-20    100.0\n",
        "2012-07-21     92.0\n",
        "Freq: D, dtype: float64"
       ]
      }
     ],
     "prompt_number": 223
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "atemps.index"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 224,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2012-07-16, ..., 2012-07-21]\n",
        "Length: 6, Freq: D, Timezone: None"
       ]
      }
     ],
     "prompt_number": 224
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "idx=atemps.index[2]\n",
      "atemps[idx]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 225,
       "text": [
        "95.0"
       ]
      }
     ],
     "prompt_number": 225
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So we can use this way to find the temp at that day"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sdtemps=Series([73,78,77,78,78,77],index=dates)\n",
      "temps=DataFrame({'Austin':atemps,'San Diago':sdtemps})\n",
      "temps"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Austin</th>\n",
        "      <th>San Diago</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-07-16</th>\n",
        "      <td> 101.5</td>\n",
        "      <td> 73</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-17</th>\n",
        "      <td>  98.0</td>\n",
        "      <td> 78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-18</th>\n",
        "      <td>  95.0</td>\n",
        "      <td> 77</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-19</th>\n",
        "      <td>  99.0</td>\n",
        "      <td> 78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-20</th>\n",
        "      <td> 100.0</td>\n",
        "      <td> 78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-21</th>\n",
        "      <td>  92.0</td>\n",
        "      <td> 77</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 226,
       "text": [
        "            Austin  San Diago\n",
        "2012-07-16   101.5         73\n",
        "2012-07-17    98.0         78\n",
        "2012-07-18    95.0         77\n",
        "2012-07-19    99.0         78\n",
        "2012-07-20   100.0         78\n",
        "2012-07-21    92.0         77"
       ]
      }
     ],
     "prompt_number": 226
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is how we make a dataframe using a dictionary inside the dataframe function "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps['Austin']#to get the austin column"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 227,
       "text": [
        "2012-07-16    101.5\n",
        "2012-07-17     98.0\n",
        "2012-07-18     95.0\n",
        "2012-07-19     99.0\n",
        "2012-07-20    100.0\n",
        "2012-07-21     92.0\n",
        "Freq: D, Name: Austin, dtype: float64"
       ]
      }
     ],
     "prompt_number": 227
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps['San Diago'][:3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 228,
       "text": [
        "2012-07-16    73\n",
        "2012-07-17    78\n",
        "2012-07-18    77\n",
        "Freq: D, Name: San Diago, dtype: int64"
       ]
      }
     ],
     "prompt_number": 228
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "If now we want the difference of 2 columns:"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps['diff']=temps['Austin']-temps['San Diago']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 229
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Austin</th>\n",
        "      <th>San Diago</th>\n",
        "      <th>diff</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-07-16</th>\n",
        "      <td> 101.5</td>\n",
        "      <td> 73</td>\n",
        "      <td> 28.5</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-17</th>\n",
        "      <td>  98.0</td>\n",
        "      <td> 78</td>\n",
        "      <td> 20.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-18</th>\n",
        "      <td>  95.0</td>\n",
        "      <td> 77</td>\n",
        "      <td> 18.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-19</th>\n",
        "      <td>  99.0</td>\n",
        "      <td> 78</td>\n",
        "      <td> 21.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-20</th>\n",
        "      <td> 100.0</td>\n",
        "      <td> 78</td>\n",
        "      <td> 22.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-21</th>\n",
        "      <td>  92.0</td>\n",
        "      <td> 77</td>\n",
        "      <td> 15.0</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 230,
       "text": [
        "            Austin  San Diago  diff\n",
        "2012-07-16   101.5         73  28.5\n",
        "2012-07-17    98.0         78  20.0\n",
        "2012-07-18    95.0         77  18.0\n",
        "2012-07-19    99.0         78  21.0\n",
        "2012-07-20   100.0         78  22.0\n",
        "2012-07-21    92.0         77  15.0"
       ]
      }
     ],
     "prompt_number": 230
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So there are a lot of ways we can play with this data using these dataframes"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We can also call a column name using . operator "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps.Austin"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 231,
       "text": [
        "2012-07-16    101.5\n",
        "2012-07-17     98.0\n",
        "2012-07-18     95.0\n",
        "2012-07-19     99.0\n",
        "2012-07-20    100.0\n",
        "2012-07-21     92.0\n",
        "Freq: D, Name: Austin, dtype: float64"
       ]
      }
     ],
     "prompt_number": 231
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now remember the series , we can do the same kind of indexing and slicing in dataframe"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "suppose we want the variable values for a particular observation that is the temperature values at a particular date at both the places "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps.ix[2]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 232,
       "text": [
        "Austin       95\n",
        "San Diago    77\n",
        "diff         18\n",
        "Name: 2012-07-18 00:00:00, dtype: float64"
       ]
      }
     ],
     "prompt_number": 232
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "del temps['diff']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 233
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps.ix[[1,0,2],['San Diago','Austin']]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>San Diago</th>\n",
        "      <th>Austin</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-07-17</th>\n",
        "      <td> 78</td>\n",
        "      <td>  98.0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-16</th>\n",
        "      <td> 73</td>\n",
        "      <td> 101.5</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-18</th>\n",
        "      <td> 77</td>\n",
        "      <td>  95.0</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 234,
       "text": [
        "            San Diago  Austin\n",
        "2012-07-17         78    98.0\n",
        "2012-07-16         73   101.5\n",
        "2012-07-18         77    95.0"
       ]
      }
     ],
     "prompt_number": 234
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "now making a timestamp and using it in slicing and indexing :"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "idx=temps.index[2]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 235
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(idx)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 236,
       "text": [
        "pandas.tslib.Timestamp"
       ]
      }
     ],
     "prompt_number": 236
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is a Timestamp"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps.ix[idx]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 237,
       "text": [
        "Austin       95\n",
        "San Diago    77\n",
        "Name: 2012-07-18 00:00:00, dtype: float64"
       ]
      }
     ],
     "prompt_number": 237
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Austin</th>\n",
        "      <th>San Diago</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-07-16</th>\n",
        "      <td> 101.5</td>\n",
        "      <td> 73</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-17</th>\n",
        "      <td>  98.0</td>\n",
        "      <td> 78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-18</th>\n",
        "      <td>  95.0</td>\n",
        "      <td> 77</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-19</th>\n",
        "      <td>  99.0</td>\n",
        "      <td> 78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-20</th>\n",
        "      <td> 100.0</td>\n",
        "      <td> 78</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-21</th>\n",
        "      <td>  92.0</td>\n",
        "      <td> 77</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 238,
       "text": [
        "            Austin  San Diago\n",
        "2012-07-16   101.5         73\n",
        "2012-07-17    98.0         78\n",
        "2012-07-18    95.0         77\n",
        "2012-07-19    99.0         78\n",
        "2012-07-20   100.0         78\n",
        "2012-07-21    92.0         77"
       ]
      }
     ],
     "prompt_number": 238
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now suppose we want to do operations on variables like calculating the mean temperature at both the places "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps.mean()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 239,
       "text": [
        "Austin       97.583333\n",
        "San Diago    76.833333\n",
        "dtype: float64"
       ]
      }
     ],
     "prompt_number": 239
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "The describe function "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps['Austin'].describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 240,
       "text": [
        "count      6.000000\n",
        "mean      97.583333\n",
        "std        3.498809\n",
        "min       92.000000\n",
        "25%       95.750000\n",
        "50%       98.500000\n",
        "75%       99.750000\n",
        "max      101.500000\n",
        "dtype: float64"
       ]
      }
     ],
     "prompt_number": 240
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Austin</th>\n",
        "      <th>San Diago</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>count</th>\n",
        "      <td>   6.000000</td>\n",
        "      <td>  6.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>mean</th>\n",
        "      <td>  97.583333</td>\n",
        "      <td> 76.833333</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>std</th>\n",
        "      <td>   3.498809</td>\n",
        "      <td>  1.940790</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>min</th>\n",
        "      <td>  92.000000</td>\n",
        "      <td> 73.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>25%</th>\n",
        "      <td>  95.750000</td>\n",
        "      <td> 77.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>50%</th>\n",
        "      <td>  98.500000</td>\n",
        "      <td> 77.500000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>75%</th>\n",
        "      <td>  99.750000</td>\n",
        "      <td> 78.000000</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>max</th>\n",
        "      <td> 101.500000</td>\n",
        "      <td> 78.000000</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 241,
       "text": [
        "           Austin  San Diago\n",
        "count    6.000000   6.000000\n",
        "mean    97.583333  76.833333\n",
        "std      3.498809   1.940790\n",
        "min     92.000000  73.000000\n",
        "25%     95.750000  77.000000\n",
        "50%     98.500000  77.500000\n",
        "75%     99.750000  78.000000\n",
        "max    101.500000  78.000000"
       ]
      }
     ],
     "prompt_number": 241
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We can have intelligent computations like deviation from mean value at each date "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps-temps.mean()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Austin</th>\n",
        "      <th>San Diago</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-07-16</th>\n",
        "      <td> 3.916667</td>\n",
        "      <td>-3.833333</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-17</th>\n",
        "      <td> 0.416667</td>\n",
        "      <td> 1.166667</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-18</th>\n",
        "      <td>-2.583333</td>\n",
        "      <td> 0.166667</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-19</th>\n",
        "      <td> 1.416667</td>\n",
        "      <td> 1.166667</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-20</th>\n",
        "      <td> 2.416667</td>\n",
        "      <td> 1.166667</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-21</th>\n",
        "      <td>-5.583333</td>\n",
        "      <td> 0.166667</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 242,
       "text": [
        "              Austin  San Diago\n",
        "2012-07-16  3.916667  -3.833333\n",
        "2012-07-17  0.416667   1.166667\n",
        "2012-07-18 -2.583333   0.166667\n",
        "2012-07-19  1.416667   1.166667\n",
        "2012-07-20  2.416667   1.166667\n",
        "2012-07-21 -5.583333   0.166667"
       ]
      }
     ],
     "prompt_number": 242
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now suppose we want the subset where temp at austin > 100 "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps[temps.Austin>100]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Austin</th>\n",
        "      <th>San Diago</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-07-16</th>\n",
        "      <td> 101.5</td>\n",
        "      <td> 73</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 243,
       "text": [
        "            Austin  San Diago\n",
        "2012-07-16   101.5         73"
       ]
      }
     ],
     "prompt_number": 243
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So there was only 1 date when temperature at Austin is >100"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "!ls"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "data_panel    foo.pkl       spx_px        test1.csv\r\n",
        "fec.pickle    fred_fx.csv   stk_prices    test2.csv\r\n",
        "foo.csv       macrodata.csv stock_prices\r\n"
       ]
      }
     ],
     "prompt_number": 244
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Cat function is used to see the kind of file what is there in the file "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "!ls"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "data_panel    foo.pkl       spx_px        test1.csv\r\n",
        "fec.pickle    fred_fx.csv   stk_prices    test2.csv\r\n",
        "foo.csv       macrodata.csv stock_prices\r\n"
       ]
      }
     ],
     "prompt_number": 246
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "!cat test1.csv"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "date,0,1,2,3\r\n",
        "2000-01-01 00:00:00,1.10376250134,-1.90997889703,-0.808955536115,-2.39262906719\r\n",
        "2000-01-02 00:00:00,1.18891664768,0.581119740849,0.86159734949,-0.213885346486\r\n",
        "2000-01-03 00:00:00,-0.964200042412,0.779764393246,1.82906224532,0.322422339415\r\n",
        "2000-01-04 00:00:00,0.782130444001,-1.72066965573,-1.10824167327,1.23348925791\r\n",
        "2000-01-05 00:00:00,-1.86701699823,-0.528368292754,-2.48830894087,1.48034194215\r\n",
        "2000-01-06 00:00:00,2.56928022646,-0.471901478927,-0.835033249865,-0.532132652067\r\n",
        "2000-01-07 00:00:00,-0.39932258251,-0.676426550985,-0.0112559158931,0.223251821044\r\n",
        "2000-01-08 00:00:00,1.64299299394,1.01341997845,1.43566709724,-0.635861850721\r\n",
        "2000-01-09 00:00:00,1.14730764657,2.13799951538,0.554171306191,-0.25553826194\r\n",
        "2000-01-10 00:00:00,0.933765825769,1.38715526486,-0.560142729978,-0.787082814998\r\n"
       ]
      }
     ],
     "prompt_number": 247
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So this basically has some data with index as a date time data type "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "lets read this file in a dataframe "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1=pd.read_csv('test1.csv')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 248
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1.head(1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>date</th>\n",
        "      <th>0</th>\n",
        "      <th>1</th>\n",
        "      <th>2</th>\n",
        "      <th>3</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> 2000-01-01 00:00:00</td>\n",
        "      <td> 1.103763</td>\n",
        "      <td>-1.909979</td>\n",
        "      <td>-0.808956</td>\n",
        "      <td>-2.392629</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 249,
       "text": [
        "                  date         0         1         2         3\n",
        "0  2000-01-01 00:00:00  1.103763 -1.909979 -0.808956 -2.392629"
       ]
      }
     ],
     "prompt_number": 249
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(test1.date[0])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 250,
       "text": [
        "str"
       ]
      }
     ],
     "prompt_number": 250
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So this just takes it as a string , we need to change it to datetime variable so that we can perform operations on it "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1=pd.read_csv('test1.csv',parse_dates=['date'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 251
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This converts the values in the date column to python datetime objects"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1.date"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 252,
       "text": [
        "0   2000-01-01\n",
        "1   2000-01-02\n",
        "2   2000-01-03\n",
        "3   2000-01-04\n",
        "4   2000-01-05\n",
        "5   2000-01-06\n",
        "6   2000-01-07\n",
        "7   2000-01-08\n",
        "8   2000-01-09\n",
        "9   2000-01-10\n",
        "Name: date, dtype: datetime64[ns]"
       ]
      }
     ],
     "prompt_number": 252
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So clearly we get back a python datetime object "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(test1.date[0])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 253,
       "text": [
        "pandas.tslib.Timestamp"
       ]
      }
     ],
     "prompt_number": 253
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So cleary this time we get time stamps in the index "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now we notice one thing that the index is no the date column , if we want the date to be index of our dataframe , we need to specify it "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1=pd.read_csv('test1.csv',parse_dates=['date'],index_col='date')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 254
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1.head(3)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>0</th>\n",
        "      <th>1</th>\n",
        "      <th>2</th>\n",
        "      <th>3</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2000-01-01</th>\n",
        "      <td> 1.103763</td>\n",
        "      <td>-1.909979</td>\n",
        "      <td>-0.808956</td>\n",
        "      <td>-2.392629</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2000-01-02</th>\n",
        "      <td> 1.188917</td>\n",
        "      <td> 0.581120</td>\n",
        "      <td> 0.861597</td>\n",
        "      <td>-0.213885</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2000-01-03</th>\n",
        "      <td>-0.964200</td>\n",
        "      <td> 0.779764</td>\n",
        "      <td> 1.829062</td>\n",
        "      <td> 0.322422</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 255,
       "text": [
        "                   0         1         2         3\n",
        "date                                              \n",
        "2000-01-01  1.103763 -1.909979 -0.808956 -2.392629\n",
        "2000-01-02  1.188917  0.581120  0.861597 -0.213885\n",
        "2000-01-03 -0.964200  0.779764  1.829062  0.322422"
       ]
      }
     ],
     "prompt_number": 255
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So clearly we get date as the index now "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1.index.name"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 256,
       "text": [
        "'date'"
       ]
      }
     ],
     "prompt_number": 256
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1.index"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 257,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2000-01-01, ..., 2000-01-10]\n",
        "Length: 10, Freq: None, Timezone: None"
       ]
      }
     ],
     "prompt_number": 257
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "SO we get back here as a datetimeindex column "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Now suppose we want the date column as a variable as well as the index of the dataframe "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1=pd.read_csv('test1.csv',parse_dates=['date'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 258
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1.head(1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>date</th>\n",
        "      <th>0</th>\n",
        "      <th>1</th>\n",
        "      <th>2</th>\n",
        "      <th>3</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2000-01-01</td>\n",
        "      <td> 1.103763</td>\n",
        "      <td>-1.909979</td>\n",
        "      <td>-0.808956</td>\n",
        "      <td>-2.392629</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 259,
       "text": [
        "        date         0         1         2         3\n",
        "0 2000-01-01  1.103763 -1.909979 -0.808956 -2.392629"
       ]
      }
     ],
     "prompt_number": 259
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test1.set_index('date',drop=False).head(2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>date</th>\n",
        "      <th>0</th>\n",
        "      <th>1</th>\n",
        "      <th>2</th>\n",
        "      <th>3</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>date</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2000-01-01</th>\n",
        "      <td>2000-01-01</td>\n",
        "      <td> 1.103763</td>\n",
        "      <td>-1.909979</td>\n",
        "      <td>-0.808956</td>\n",
        "      <td>-2.392629</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2000-01-02</th>\n",
        "      <td>2000-01-02</td>\n",
        "      <td> 1.188917</td>\n",
        "      <td> 0.581120</td>\n",
        "      <td> 0.861597</td>\n",
        "      <td>-0.213885</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 260,
       "text": [
        "                 date         0         1         2         3\n",
        "date                                                         \n",
        "2000-01-01 2000-01-01  1.103763 -1.909979 -0.808956 -2.392629\n",
        "2000-01-02 2000-01-02  1.188917  0.581120  0.861597 -0.213885"
       ]
      }
     ],
     "prompt_number": 260
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So here we can still access the date and the index is also a date "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test2=pd.read_csv('test2.csv')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 261
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test2.head(2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>date</th>\n",
        "      <th>0</th>\n",
        "      <th>1</th>\n",
        "      <th>2</th>\n",
        "      <th>3</th>\n",
        "      <th>time</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> 2000-01-01</td>\n",
        "      <td> 1.103763</td>\n",
        "      <td>-1.909979</td>\n",
        "      <td>-0.808956</td>\n",
        "      <td>-2.392629</td>\n",
        "      <td> 00:00:00</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> 2000-01-02</td>\n",
        "      <td> 1.188917</td>\n",
        "      <td> 0.581120</td>\n",
        "      <td> 0.861597</td>\n",
        "      <td>-0.213885</td>\n",
        "      <td> 00:00:00</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 262,
       "text": [
        "         date         0         1         2         3      time\n",
        "0  2000-01-01  1.103763 -1.909979 -0.808956 -2.392629  00:00:00\n",
        "1  2000-01-02  1.188917  0.581120  0.861597 -0.213885  00:00:00"
       ]
      }
     ],
     "prompt_number": 262
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Here clearly the date and the time are splitted in 2 columns "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Suppose we want to combine date and time column and then parse it "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test2=pd.read_csv('test2.csv',parse_dates=[['date','time']])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 263
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test2.head(2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>date_time</th>\n",
        "      <th>0</th>\n",
        "      <th>1</th>\n",
        "      <th>2</th>\n",
        "      <th>3</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>2000-01-01</td>\n",
        "      <td> 1.103763</td>\n",
        "      <td>-1.909979</td>\n",
        "      <td>-0.808956</td>\n",
        "      <td>-2.392629</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>2000-01-02</td>\n",
        "      <td> 1.188917</td>\n",
        "      <td> 0.581120</td>\n",
        "      <td> 0.861597</td>\n",
        "      <td>-0.213885</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 264,
       "text": [
        "   date_time         0         1         2         3\n",
        "0 2000-01-01  1.103763 -1.909979 -0.808956 -2.392629\n",
        "1 2000-01-02  1.188917  0.581120  0.861597 -0.213885"
       ]
      }
     ],
     "prompt_number": 264
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test2.date_time[0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 265,
       "text": [
        "Timestamp('2000-01-01 00:00:00')"
       ]
      }
     ],
     "prompt_number": 265
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "so it has clearly glued the 2 columns together and parsed them as a timestamp"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test2=pd.read_csv('test2.csv',parse_dates=[['date','time']],\n",
      "                  index_col=['date_time'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 266
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test2.head(2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>0</th>\n",
        "      <th>1</th>\n",
        "      <th>2</th>\n",
        "      <th>3</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>date_time</th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2000-01-01</th>\n",
        "      <td> 1.103763</td>\n",
        "      <td>-1.909979</td>\n",
        "      <td>-0.808956</td>\n",
        "      <td>-2.392629</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2000-01-02</th>\n",
        "      <td> 1.188917</td>\n",
        "      <td> 0.581120</td>\n",
        "      <td> 0.861597</td>\n",
        "      <td>-0.213885</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 267,
       "text": [
        "                   0         1         2         3\n",
        "date_time                                         \n",
        "2000-01-01  1.103763 -1.909979 -0.808956 -2.392629\n",
        "2000-01-02  1.188917  0.581120  0.861597 -0.213885"
       ]
      }
     ],
     "prompt_number": 267
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "test2.index"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 268,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2000-01-01, ..., 2000-01-10]\n",
        "Length: 10, Freq: None, Timezone: None"
       ]
      }
     ],
     "prompt_number": 268
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We use a question mark to know about a particular function "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "pd.read_csv?"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 269
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "So now we will learn mode about the Datetime data variable "
     ]
    },
    {
     "cell_type": "heading",
     "level": 5,
     "metadata": {},
     "source": [
      "datetime64[ns]:nanosecond , this was added to numpy in about 2010 . Each time stamp represens ~600 year timestamp , 1700-2300"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Datetimeindex - supports for duplicate timestamp . Timestamp is a subclass of datetime that supports nanoseconds "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "pd.Timestamp"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 270,
       "text": [
        "pandas.tslib.Timestamp"
       ]
      }
     ],
     "prompt_number": 270
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "pd.Timestamp.mro()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 271,
       "text": [
        "[pandas.tslib.Timestamp,\n",
        " pandas.tslib._Timestamp,\n",
        " datetime.datetime,\n",
        " datetime.date,\n",
        " object]"
       ]
      }
     ],
     "prompt_number": 271
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Making a timestamp : "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stamp=pd.Timestamp('7/17/2012 10:06:45')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 273
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "stamp.value #this gives the nanosecond value "
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 274,
       "text": [
        "1342519605000000000"
       ]
      }
     ],
     "prompt_number": 274
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print stamp.second,stamp.year,stamp.month,stamp.day,stamp.hour"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "45 2012 7 17 10\n"
       ]
      }
     ],
     "prompt_number": 275
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "dates=['7/16/2012','7/18/2012','7/20/2012']\n",
      "dates"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 276,
       "text": [
        "['7/16/2012', '7/18/2012', '7/20/2012']"
       ]
      }
     ],
     "prompt_number": 276
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s1=Series(range(3),index=dates)\n",
      "s1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 277,
       "text": [
        "7/16/2012    0\n",
        "7/18/2012    1\n",
        "7/20/2012    2\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 277
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s1.index"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 278,
       "text": [
        "Index([u'7/16/2012', u'7/18/2012', u'7/20/2012'], dtype='object')"
       ]
      }
     ],
     "prompt_number": 278
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is how we converted the dates to datetimeindex"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "pd.DatetimeIndex(dates)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 279,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2012-07-16, ..., 2012-07-20]\n",
        "Length: 3, Freq: None, Timezone: None"
       ]
      }
     ],
     "prompt_number": 279
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is how to convert directly into datetimeindex"
     ]
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Dayfirst option in datetime"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "dates=['7/09/2012','7/10/2012','7/11/2012']\n",
      "dates"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 280,
       "text": [
        "['7/09/2012', '7/10/2012', '7/11/2012']"
       ]
      }
     ],
     "prompt_number": 280
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(pd.to_datetime(dates,dayfirst=True))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 281,
       "text": [
        "[Timestamp('2012-09-07 00:00:00'),\n",
        " Timestamp('2012-10-07 00:00:00'),\n",
        " Timestamp('2012-11-07 00:00:00')]"
       ]
      }
     ],
     "prompt_number": 281
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So here we get the European format instead of the US format of date "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s1.index[0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 282,
       "text": [
        "'7/16/2012'"
       ]
      }
     ],
     "prompt_number": 282
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s1"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 283,
       "text": [
        "7/16/2012    0\n",
        "7/18/2012    1\n",
        "7/20/2012    2\n",
        "dtype: int64"
       ]
      }
     ],
     "prompt_number": 283
    },
    {
     "cell_type": "heading",
     "level": 3,
     "metadata": {},
     "source": [
      "Lets talk about time series indexing "
     ]
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Indexing"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rng=pd.date_range('2012-07-17',periods=1000)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 284
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Here we create fix frequency of timestamps as a datetime object "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rng"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 285,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2012-07-17, ..., 2015-04-12]\n",
        "Length: 1000, Freq: D, Timezone: None"
       ]
      }
     ],
     "prompt_number": 285
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Creating a time series now :"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts=Series(np.arange(1000),index=rng)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 286
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts[:3]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 287,
       "text": [
        "2012-07-17    0\n",
        "2012-07-18    1\n",
        "2012-07-19    2\n",
        "Freq: D, dtype: int64"
       ]
      }
     ],
     "prompt_number": 287
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts[997:]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 288,
       "text": [
        "2015-04-10    997\n",
        "2015-04-11    998\n",
        "2015-04-12    999\n",
        "Freq: D, dtype: int64"
       ]
      }
     ],
     "prompt_number": 288
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "so we get the above time series now . Now suppose we want to select just a single value from the above time series "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "By indexing we mean selecting elements from the time series "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts[ts.index[133]]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 289,
       "text": [
        "133"
       ]
      }
     ],
     "prompt_number": 289
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We can also pass the string "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts['2012-11-27']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 290,
       "text": [
        "133"
       ]
      }
     ],
     "prompt_number": 290
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "We want to select data upto and including 2012-11-27"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts[:'2012-11-27']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 291,
       "text": [
        "2012-07-17     0\n",
        "2012-07-18     1\n",
        "2012-07-19     2\n",
        "2012-07-20     3\n",
        "2012-07-21     4\n",
        "2012-07-22     5\n",
        "2012-07-23     6\n",
        "2012-07-24     7\n",
        "2012-07-25     8\n",
        "2012-07-26     9\n",
        "2012-07-27    10\n",
        "2012-07-28    11\n",
        "2012-07-29    12\n",
        "2012-07-30    13\n",
        "2012-07-31    14\n",
        "...\n",
        "2012-11-13    119\n",
        "2012-11-14    120\n",
        "2012-11-15    121\n",
        "2012-11-16    122\n",
        "2012-11-17    123\n",
        "2012-11-18    124\n",
        "2012-11-19    125\n",
        "2012-11-20    126\n",
        "2012-11-21    127\n",
        "2012-11-22    128\n",
        "2012-11-23    129\n",
        "2012-11-24    130\n",
        "2012-11-25    131\n",
        "2012-11-26    132\n",
        "2012-11-27    133\n",
        "Freq: D, Length: 134"
       ]
      }
     ],
     "prompt_number": 291
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "The end point is generally not included in case of numpy array and series slicing but it is included incase of a time series "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "for example: "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a=np.arange(100)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 292
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "a[:10]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 293,
       "text": [
        "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
       ]
      }
     ],
     "prompt_number": 293
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "only till 9 are displayed not the 10th one "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rng=pd.date_range('2012-07-17',periods=1000)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 294
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rng"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 295,
       "text": [
        "<class 'pandas.tseries.index.DatetimeIndex'>\n",
        "[2012-07-17, ..., 2015-04-12]\n",
        "Length: 1000, Freq: D, Timezone: None"
       ]
      }
     ],
     "prompt_number": 295
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rng[0]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 296,
       "text": [
        "Timestamp('2012-07-17 00:00:00', offset='D')"
       ]
      }
     ],
     "prompt_number": 296
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rng[1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 297,
       "text": [
        "Timestamp('2012-07-18 00:00:00', offset='D')"
       ]
      }
     ],
     "prompt_number": 297
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "observe how the date is increasing step by step "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Notice that the offset is D so the data is increasing day by day "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts2=ts.take(np.random.permutation(len(ts)))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 298
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 299,
       "text": [
        "2014-11-24    860\n",
        "2013-08-21    400\n",
        "2013-07-24    372\n",
        "2014-08-26    770\n",
        "2012-12-29    165\n",
        "2014-05-03    655\n",
        "2013-05-24    311\n",
        "2013-06-19    337\n",
        "2015-01-24    921\n",
        "2014-04-28    650\n",
        "2013-10-11    451\n",
        "2012-08-27     41\n",
        "2014-01-07    539\n",
        "2014-08-16    760\n",
        "2013-09-25    435\n",
        "...\n",
        "2015-04-08    995\n",
        "2013-09-14    424\n",
        "2014-09-13    788\n",
        "2013-02-13    211\n",
        "2015-01-26    923\n",
        "2012-12-09    145\n",
        "2013-07-07    355\n",
        "2013-11-14    485\n",
        "2014-02-03    566\n",
        "2013-11-20    491\n",
        "2014-11-06    842\n",
        "2015-01-06    903\n",
        "2013-02-11    209\n",
        "2014-08-25    769\n",
        "2013-01-04    171\n",
        "Length: 1000"
       ]
      }
     ],
     "prompt_number": 299
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts2.sort_index()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 300,
       "text": [
        "2012-07-17     0\n",
        "2012-07-18     1\n",
        "2012-07-19     2\n",
        "2012-07-20     3\n",
        "2012-07-21     4\n",
        "2012-07-22     5\n",
        "2012-07-23     6\n",
        "2012-07-24     7\n",
        "2012-07-25     8\n",
        "2012-07-26     9\n",
        "2012-07-27    10\n",
        "2012-07-28    11\n",
        "2012-07-29    12\n",
        "2012-07-30    13\n",
        "2012-07-31    14\n",
        "...\n",
        "2015-03-29    985\n",
        "2015-03-30    986\n",
        "2015-03-31    987\n",
        "2015-04-01    988\n",
        "2015-04-02    989\n",
        "2015-04-03    990\n",
        "2015-04-04    991\n",
        "2015-04-05    992\n",
        "2015-04-06    993\n",
        "2015-04-07    994\n",
        "2015-04-08    995\n",
        "2015-04-09    996\n",
        "2015-04-10    997\n",
        "2015-04-11    998\n",
        "2015-04-12    999\n",
        "Length: 1000"
       ]
      }
     ],
     "prompt_number": 300
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "sort_index returns a time series sorted by date "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts['2012-7-26']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 301,
       "text": [
        "9"
       ]
      }
     ],
     "prompt_number": 301
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "we can also select subsets of the data like only july 2012 "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts['2012-7']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 302,
       "text": [
        "2012-07-17     0\n",
        "2012-07-18     1\n",
        "2012-07-19     2\n",
        "2012-07-20     3\n",
        "2012-07-21     4\n",
        "2012-07-22     5\n",
        "2012-07-23     6\n",
        "2012-07-24     7\n",
        "2012-07-25     8\n",
        "2012-07-26     9\n",
        "2012-07-27    10\n",
        "2012-07-28    11\n",
        "2012-07-29    12\n",
        "2012-07-30    13\n",
        "2012-07-31    14\n",
        "Freq: D, dtype: int64"
       ]
      }
     ],
     "prompt_number": 302
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "ts['2012-7':'2012-8']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 303,
       "text": [
        "2012-07-17     0\n",
        "2012-07-18     1\n",
        "2012-07-19     2\n",
        "2012-07-20     3\n",
        "2012-07-21     4\n",
        "2012-07-22     5\n",
        "2012-07-23     6\n",
        "2012-07-24     7\n",
        "2012-07-25     8\n",
        "2012-07-26     9\n",
        "2012-07-27    10\n",
        "2012-07-28    11\n",
        "2012-07-29    12\n",
        "2012-07-30    13\n",
        "2012-07-31    14\n",
        "2012-08-01    15\n",
        "2012-08-02    16\n",
        "2012-08-03    17\n",
        "2012-08-04    18\n",
        "2012-08-05    19\n",
        "2012-08-06    20\n",
        "2012-08-07    21\n",
        "2012-08-08    22\n",
        "2012-08-09    23\n",
        "2012-08-10    24\n",
        "2012-08-11    25\n",
        "2012-08-12    26\n",
        "2012-08-13    27\n",
        "2012-08-14    28\n",
        "2012-08-15    29\n",
        "2012-08-16    30\n",
        "2012-08-17    31\n",
        "2012-08-18    32\n",
        "2012-08-19    33\n",
        "2012-08-20    34\n",
        "2012-08-21    35\n",
        "2012-08-22    36\n",
        "2012-08-23    37\n",
        "2012-08-24    38\n",
        "2012-08-25    39\n",
        "2012-08-26    40\n",
        "2012-08-27    41\n",
        "2012-08-28    42\n",
        "2012-08-29    43\n",
        "2012-08-30    44\n",
        "2012-08-31    45\n",
        "Freq: D, dtype: int64"
       ]
      }
     ],
     "prompt_number": 303
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This only gives data of july and aug "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "similarly we could do it for year also "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df1=DataFrame(np.arange(4000).reshape((1000,4)),index=rng)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 304
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df1.head(1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>0</th>\n",
        "      <th>1</th>\n",
        "      <th>2</th>\n",
        "      <th>3</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-07-17</th>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 2</td>\n",
        "      <td> 3</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 305,
       "text": [
        "            0  1  2  3\n",
        "2012-07-17  0  1  2  3"
       ]
      }
     ],
     "prompt_number": 305
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "we can also name the columns"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df1=DataFrame(np.arange(4000).reshape((1000,4)),index=rng,\n",
      "              columns=['delhi','mumbai','calcutta','tamil'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 306
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df1.head(1)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>delhi</th>\n",
        "      <th>mumbai</th>\n",
        "      <th>calcutta</th>\n",
        "      <th>tamil</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-07-17</th>\n",
        "      <td> 0</td>\n",
        "      <td> 1</td>\n",
        "      <td> 2</td>\n",
        "      <td> 3</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 307,
       "text": [
        "            delhi  mumbai  calcutta  tamil\n",
        "2012-07-17      0       1         2      3"
       ]
      }
     ],
     "prompt_number": 307
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df1.ix['2012-7-29']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 308,
       "text": [
        "delhi       48\n",
        "mumbai      49\n",
        "calcutta    50\n",
        "tamil       51\n",
        "Name: 2012-07-29 00:00:00, dtype: int64"
       ]
      }
     ],
     "prompt_number": 308
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "So using ix we get the data for all the cities for a particular date "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df1.ix['2012-7-29'].index"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 309,
       "text": [
        "Index([u'delhi', u'mumbai', u'calcutta', u'tamil'], dtype='object')"
       ]
      }
     ],
     "prompt_number": 309
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df1.ix['2012-7-20'].name"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 310,
       "text": [
        "Timestamp('2012-07-20 00:00:00', offset='D')"
       ]
      }
     ],
     "prompt_number": 310
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This gives us the timestamp"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from datetime import timedelta,datetime"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 311
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "start=datetime(2012,12,31)\n",
      "df1.ix[start:start+timedelta(days=11)]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>delhi</th>\n",
        "      <th>mumbai</th>\n",
        "      <th>calcutta</th>\n",
        "      <th>tamil</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-12-31</th>\n",
        "      <td> 668</td>\n",
        "      <td> 669</td>\n",
        "      <td> 670</td>\n",
        "      <td> 671</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-01</th>\n",
        "      <td> 672</td>\n",
        "      <td> 673</td>\n",
        "      <td> 674</td>\n",
        "      <td> 675</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-02</th>\n",
        "      <td> 676</td>\n",
        "      <td> 677</td>\n",
        "      <td> 678</td>\n",
        "      <td> 679</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-03</th>\n",
        "      <td> 680</td>\n",
        "      <td> 681</td>\n",
        "      <td> 682</td>\n",
        "      <td> 683</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-04</th>\n",
        "      <td> 684</td>\n",
        "      <td> 685</td>\n",
        "      <td> 686</td>\n",
        "      <td> 687</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-05</th>\n",
        "      <td> 688</td>\n",
        "      <td> 689</td>\n",
        "      <td> 690</td>\n",
        "      <td> 691</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-06</th>\n",
        "      <td> 692</td>\n",
        "      <td> 693</td>\n",
        "      <td> 694</td>\n",
        "      <td> 695</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-07</th>\n",
        "      <td> 696</td>\n",
        "      <td> 697</td>\n",
        "      <td> 698</td>\n",
        "      <td> 699</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-08</th>\n",
        "      <td> 700</td>\n",
        "      <td> 701</td>\n",
        "      <td> 702</td>\n",
        "      <td> 703</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-09</th>\n",
        "      <td> 704</td>\n",
        "      <td> 705</td>\n",
        "      <td> 706</td>\n",
        "      <td> 707</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-10</th>\n",
        "      <td> 708</td>\n",
        "      <td> 709</td>\n",
        "      <td> 710</td>\n",
        "      <td> 711</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-11</th>\n",
        "      <td> 712</td>\n",
        "      <td> 713</td>\n",
        "      <td> 714</td>\n",
        "      <td> 715</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 312,
       "text": [
        "            delhi  mumbai  calcutta  tamil\n",
        "2012-12-31    668     669       670    671\n",
        "2013-01-01    672     673       674    675\n",
        "2013-01-02    676     677       678    679\n",
        "2013-01-03    680     681       682    683\n",
        "2013-01-04    684     685       686    687\n",
        "2013-01-05    688     689       690    691\n",
        "2013-01-06    692     693       694    695\n",
        "2013-01-07    696     697       698    699\n",
        "2013-01-08    700     701       702    703\n",
        "2013-01-09    704     705       706    707\n",
        "2013-01-10    708     709       710    711\n",
        "2013-01-11    712     713       714    715"
       ]
      }
     ],
     "prompt_number": 312
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "len(df1.ix[start:start+timedelta(days=11)])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 313,
       "text": [
        "12"
       ]
      }
     ],
     "prompt_number": 313
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "so we get here a data of 12 days not 11 as the end point is also included in the case of a time series "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "The above thing could also be done using pandas offsets object "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df1.ix[start:start+pd.offsets.Day(11)]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>delhi</th>\n",
        "      <th>mumbai</th>\n",
        "      <th>calcutta</th>\n",
        "      <th>tamil</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-12-31</th>\n",
        "      <td> 668</td>\n",
        "      <td> 669</td>\n",
        "      <td> 670</td>\n",
        "      <td> 671</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-01</th>\n",
        "      <td> 672</td>\n",
        "      <td> 673</td>\n",
        "      <td> 674</td>\n",
        "      <td> 675</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-02</th>\n",
        "      <td> 676</td>\n",
        "      <td> 677</td>\n",
        "      <td> 678</td>\n",
        "      <td> 679</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-03</th>\n",
        "      <td> 680</td>\n",
        "      <td> 681</td>\n",
        "      <td> 682</td>\n",
        "      <td> 683</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-04</th>\n",
        "      <td> 684</td>\n",
        "      <td> 685</td>\n",
        "      <td> 686</td>\n",
        "      <td> 687</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-05</th>\n",
        "      <td> 688</td>\n",
        "      <td> 689</td>\n",
        "      <td> 690</td>\n",
        "      <td> 691</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-06</th>\n",
        "      <td> 692</td>\n",
        "      <td> 693</td>\n",
        "      <td> 694</td>\n",
        "      <td> 695</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-07</th>\n",
        "      <td> 696</td>\n",
        "      <td> 697</td>\n",
        "      <td> 698</td>\n",
        "      <td> 699</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-08</th>\n",
        "      <td> 700</td>\n",
        "      <td> 701</td>\n",
        "      <td> 702</td>\n",
        "      <td> 703</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-09</th>\n",
        "      <td> 704</td>\n",
        "      <td> 705</td>\n",
        "      <td> 706</td>\n",
        "      <td> 707</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-10</th>\n",
        "      <td> 708</td>\n",
        "      <td> 709</td>\n",
        "      <td> 710</td>\n",
        "      <td> 711</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2013-01-11</th>\n",
        "      <td> 712</td>\n",
        "      <td> 713</td>\n",
        "      <td> 714</td>\n",
        "      <td> 715</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 314,
       "text": [
        "            delhi  mumbai  calcutta  tamil\n",
        "2012-12-31    668     669       670    671\n",
        "2013-01-01    672     673       674    675\n",
        "2013-01-02    676     677       678    679\n",
        "2013-01-03    680     681       682    683\n",
        "2013-01-04    684     685       686    687\n",
        "2013-01-05    688     689       690    691\n",
        "2013-01-06    692     693       694    695\n",
        "2013-01-07    696     697       698    699\n",
        "2013-01-08    700     701       702    703\n",
        "2013-01-09    704     705       706    707\n",
        "2013-01-10    708     709       710    711\n",
        "2013-01-11    712     713       714    715"
       ]
      }
     ],
     "prompt_number": 314
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "The kind of offsets in time series "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "D: for a calender day .B is for a business day . M is calender end of the month . BM is business end of month . "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(pd.date_range('2000-01-01',periods=5))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 315,
       "text": [
        "[Timestamp('2000-01-01 00:00:00', offset='D'),\n",
        " Timestamp('2000-01-02 00:00:00', offset='D'),\n",
        " Timestamp('2000-01-03 00:00:00', offset='D'),\n",
        " Timestamp('2000-01-04 00:00:00', offset='D'),\n",
        " Timestamp('2000-01-05 00:00:00', offset='D')]"
       ]
      }
     ],
     "prompt_number": 315
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is a timeseries generated with a frequency of a calender day "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "With business day it is the weekends which are not considered "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "H is for an hour , s is for a second "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(pd.date_range('2000-01-01',periods=5,freq='BM'))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 316,
       "text": [
        "[Timestamp('2000-01-31 00:00:00', offset='BM'),\n",
        " Timestamp('2000-02-29 00:00:00', offset='BM'),\n",
        " Timestamp('2000-03-31 00:00:00', offset='BM'),\n",
        " Timestamp('2000-04-28 00:00:00', offset='BM'),\n",
        " Timestamp('2000-05-31 00:00:00', offset='BM')]"
       ]
      }
     ],
     "prompt_number": 316
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This is used in case of a financial calender "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "MS is for start of the month "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(pd.date_range('2000-01-01',periods=5,freq='H'))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 317,
       "text": [
        "[Timestamp('2000-01-01 00:00:00', offset='H'),\n",
        " Timestamp('2000-01-01 01:00:00', offset='H'),\n",
        " Timestamp('2000-01-01 02:00:00', offset='H'),\n",
        " Timestamp('2000-01-01 03:00:00', offset='H'),\n",
        " Timestamp('2000-01-01 04:00:00', offset='H')]"
       ]
      }
     ],
     "prompt_number": 317
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(pd.date_range('2000-01-01',periods=5,freq='s'))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 318,
       "text": [
        "[Timestamp('2000-01-01 00:00:00', offset='S'),\n",
        " Timestamp('2000-01-01 00:00:01', offset='S'),\n",
        " Timestamp('2000-01-01 00:00:02', offset='S'),\n",
        " Timestamp('2000-01-01 00:00:03', offset='S'),\n",
        " Timestamp('2000-01-01 00:00:04', offset='S')]"
       ]
      }
     ],
     "prompt_number": 318
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(pd.date_range('2000-01-01',periods=5,freq='m'))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 319,
       "text": [
        "[Timestamp('2000-01-31 00:00:00', offset='M'),\n",
        " Timestamp('2000-02-29 00:00:00', offset='M'),\n",
        " Timestamp('2000-03-31 00:00:00', offset='M'),\n",
        " Timestamp('2000-04-30 00:00:00', offset='M'),\n",
        " Timestamp('2000-05-31 00:00:00', offset='M')]"
       ]
      }
     ],
     "prompt_number": 319
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "m is for the month end not minutes "
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Annual dates falling on last day of june "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(pd.date_range('2000-01-01',periods=5,freq='BA-FEB'))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 320,
       "text": [
        "[Timestamp('2000-02-29 00:00:00', offset='BA-FEB'),\n",
        " Timestamp('2001-02-28 00:00:00', offset='BA-FEB'),\n",
        " Timestamp('2002-02-28 00:00:00', offset='BA-FEB'),\n",
        " Timestamp('2003-02-28 00:00:00', offset='BA-FEB'),\n",
        " Timestamp('2004-02-27 00:00:00', offset='BA-FEB')]"
       ]
      }
     ],
     "prompt_number": 320
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "for quaterly dates "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(pd.date_range('2000-01-01',periods=5,freq='Q-DEC'))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 321,
       "text": [
        "[Timestamp('2000-03-31 00:00:00', offset='Q-DEC'),\n",
        " Timestamp('2000-06-30 00:00:00', offset='Q-DEC'),\n",
        " Timestamp('2000-09-30 00:00:00', offset='Q-DEC'),\n",
        " Timestamp('2000-12-31 00:00:00', offset='Q-DEC'),\n",
        " Timestamp('2001-03-31 00:00:00', offset='Q-DEC')]"
       ]
      }
     ],
     "prompt_number": 321
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "for 3rd friday of each month "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "list(pd.date_range('2000-01-01',periods=5,freq='WOM-2FRI'))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 322,
       "text": [
        "[Timestamp('2000-01-14 00:00:00', offset='WOM-2FRI'),\n",
        " Timestamp('2000-02-11 00:00:00', offset='WOM-2FRI'),\n",
        " Timestamp('2000-03-10 00:00:00', offset='WOM-2FRI'),\n",
        " Timestamp('2000-04-14 00:00:00', offset='WOM-2FRI'),\n",
        " Timestamp('2000-05-12 00:00:00', offset='WOM-2FRI')]"
       ]
      }
     ],
     "prompt_number": 322
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "atemps=temps.Austin"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 323
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sdtemps=temps['San Diago'].drop(temps.index[3])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 325
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "atemps"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 327,
       "text": [
        "2012-07-16    101.5\n",
        "2012-07-17     98.0\n",
        "2012-07-18     95.0\n",
        "2012-07-19     99.0\n",
        "2012-07-20    100.0\n",
        "2012-07-21     92.0\n",
        "Freq: D, Name: Austin, dtype: float64"
       ]
      }
     ],
     "prompt_number": 327
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "sdtemps"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 328,
       "text": [
        "2012-07-16    73\n",
        "2012-07-17    78\n",
        "2012-07-18    77\n",
        "2012-07-20    78\n",
        "2012-07-21    77\n",
        "Name: San Diago, dtype: int64"
       ]
      }
     ],
     "prompt_number": 328
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "1 less record here "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "temps-temps[:-1]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Austin</th>\n",
        "      <th>San Diago</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>2012-07-16</th>\n",
        "      <td>  0</td>\n",
        "      <td>  0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-17</th>\n",
        "      <td>  0</td>\n",
        "      <td>  0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-18</th>\n",
        "      <td>  0</td>\n",
        "      <td>  0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-19</th>\n",
        "      <td>  0</td>\n",
        "      <td>  0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-20</th>\n",
        "      <td>  0</td>\n",
        "      <td>  0</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2012-07-21</th>\n",
        "      <td>NaN</td>\n",
        "      <td>NaN</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 329,
       "text": [
        "            Austin  San Diago\n",
        "2012-07-16       0          0\n",
        "2012-07-17       0          0\n",
        "2012-07-18       0          0\n",
        "2012-07-19       0          0\n",
        "2012-07-20       0          0\n",
        "2012-07-21     NaN        NaN"
       ]
      }
     ],
     "prompt_number": 329
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This gives NAN in the last row as there is no last row in the temp[:-1]"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "diff=atemps-sdtemps\n",
      "diff"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 330,
       "text": [
        "2012-07-16    28.5\n",
        "2012-07-17    20.0\n",
        "2012-07-18    18.0\n",
        "2012-07-19     NaN\n",
        "2012-07-20    22.0\n",
        "2012-07-21    15.0\n",
        "dtype: float64"
       ]
      }
     ],
     "prompt_number": 330
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "diff.fillna(method='ffill')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 331,
       "text": [
        "2012-07-16    28.5\n",
        "2012-07-17    20.0\n",
        "2012-07-18    18.0\n",
        "2012-07-19    18.0\n",
        "2012-07-20    22.0\n",
        "2012-07-21    15.0\n",
        "dtype: float64"
       ]
      }
     ],
     "prompt_number": 331
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This fills the na value with the previous value . Similarly bfill"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "diff.fillna(999)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 332,
       "text": [
        "2012-07-16     28.5\n",
        "2012-07-17     20.0\n",
        "2012-07-18     18.0\n",
        "2012-07-19    999.0\n",
        "2012-07-20     22.0\n",
        "2012-07-21     15.0\n",
        "dtype: float64"
       ]
      }
     ],
     "prompt_number": 332
    },
    {
     "cell_type": "heading",
     "level": 1,
     "metadata": {},
     "source": [
      "Resampling "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "datetime.now()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 336,
       "text": [
        "datetime.datetime(2014, 11, 18, 10, 9, 39, 676849)"
       ]
      }
     ],
     "prompt_number": 336
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "This gibes the timestamp of the present time and date "
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "rng=pd.date_range(datetime.now(),periods=1000000,freq='t')"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 337
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "s=Series(np.random.randn(1000000),index=rng)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}